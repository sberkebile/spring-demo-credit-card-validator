plugins {
    id 'org.springframework.boot' version '2.6.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
}

apply plugin: 'jacoco'
apply plugin: 'application'

repositories {
    mavenLocal()

    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web:2.6.6+'
    implementation 'org.projectlombok:lombok:1.18.22+'
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation 'org.springframework.boot:spring-boot-starter-validation:+'

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testCompileOnly 'org.projectlombok:lombok:1.18.22'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:2.6.6+'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

tasks.withType(Test) {
    useJUnitPlatform()
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacoco/html')
    }
    dependsOn test
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
            excludes = [
                    'com.example.springdemoproject.creditcards.CreditCardController',
                    'com.example.springdemoproject.creditcards.CreditCardResponse',
                    'com.example.springdemoproject.creditcards.ICreditCardService',
                    'com.example.springdemoproject.creditcards.CreditCardRequest',
                    'com.example.springdemoproject.creditcards.CreditcardResponse'
            ]
        }
    }
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification